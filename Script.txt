const SS = SpreadsheetApp.getActiveSpreadsheet();

function criarMenu() {
  var ui = SpreadsheetApp.getUi();
  ui.createMenu('Certificados')
    .addItem('üì© Enviar Certificados', 'confirmEmail')
    .addToUi();
}

function getSheetById(id) {
  var sheets = SpreadsheetApp.getActive().getSheets();
  for (var i in sheets) {
    if (sheets[i].getSheetId() == id) return sheets[i];
  }
}

const pagina1 = getSheetById(7.33901958E8); 
const pagina2 = getSheetById(5.91734693E8); 

function removerLinhasRepetidas() {
  const rangeDados = pagina1.getDataRange();  Obt√©m o intervalo completo
  const dados1 = rangeDados.getValues();  Obt√©m os dados como matriz

  if (dados1.length = 1) {
    Logger.log(A planilha est√° vazia ou s√≥ tem o cabe√ßalho.);
    return;
  }

  const primlinha = dados1[0];  Preserva a primeira linha como cabe√ßalho
  const linhasUnicas = [primlinha];  Come√ßa com o cabe√ßalho
  const setLinhas = new Set();  Armazena combina√ß√µes √∫nicas das duas primeiras colunas

   Verifica duplicatas a partir da segunda linha, considerando apenas as duas primeiras colunas
  for (let i = 1; i  dados1.length; i++) {
    const chaveLinha = JSON.stringify(dados1[i].slice(0, 2));  Combina√ß√£o das duas primeiras colunas
    if (!setLinhas.has(chaveLinha)) {
      setLinhas.add(chaveLinha);
      linhasUnicas.push(dados1[i]);  Adiciona linha √∫nica completa
    }
  }

   Atualiza apenas os dados √∫nicos, preservando formata√ß√£o do cabe√ßalho
  pagina1.getRange(2, 1, pagina1.getLastRow() - 1, pagina1.getLastColumn()).clear();  Limpa dados abaixo do cabe√ßalho
  pagina1.getRange(1, 1, linhasUnicas.length, linhasUnicas[0].length).setValues(linhasUnicas);  Escreve os dados √∫nicos
}

const cabecalho = pagina1.getDataRange().getValues();
const variaveis = pagina2.getDataRange().getValues();
const dados = cabecalho.slice(1);


const lista1 = dados.map(usuario = usuario[0]);
const lista2 = dados.map(usuario = usuario[1]);
const status = dados.map(usuario = usuario[2]);

function identificarListas(nameList, emailList) {
  function primeiroNaoVazio(lista) {
    return lista.find(item = item.trim() !== );
  }
  const primeiroNome = primeiroNaoVazio(nameList);

  if (primeiroNome && primeiroNome.includes(@)) {
    return { emailList nameList, nameList emailList };
  } else {
    return { nameList nameList, emailList emailList };
  }
}

const { emailList, nameList } = identificarListas(lista1, lista2);
const listavar = variaveis[1];
const PastaID = listavar[0].split('').pop();
const titemail = listavar[1];
const textemail = listavar[2];
const docname = listavar[3];

function verificarArroba(texto) {
  if (texto.includes(@)) {
    return texto;
  } else {
    return ;
  }
}

const copia = verificarArroba(listavar[4]);
const responder = verificarArroba(listavar[5]);

const folder = DriveApp.getFolderById(PastaID);



function substituirTextoPorPosicao(texto) {
  const titulos = cabecalho[0];
  const resultados = [];

  function obterSaudacao() {
    const horaAtual = new Date().getHours();
    if (horaAtual  12) {
      return bom dia;
    } else if (horaAtual  18) {
      return boa tarde;
    } else {
      return boa noite;
    }
  }

  for (let i = 1; i  cabecalho.length; i++) {
    let textoSubstituido = texto;
    const linha = cabecalho[i];

    textoSubstituido = textoSubstituido.replace(##(.)##g, (match, p1) = {
      if (p1 === saudacao) {
        return obterSaudacao();
      }
      const indice = titulos.indexOf(p1);
      return indice !== -1  linha[indice]  match;
    });

    resultados.push(textoSubstituido);
  }

  return resultados;
}

 Obtem um dicion√°rio com nome e conte√∫do de documentos da pasta
function obterConteudoDocumentosGoogleDocs() {
  const documentos = {};
  const files = folder.getFilesByType(MimeType.GOOGLE_DOCS);

   L√™ cada arquivo do tipo Google Docs e armazena seu conte√∫do
  while (files.hasNext()) {
    const file = files.next();
    const doc = DocumentApp.openById(file.getId());
    const content = doc.getBody().getText();  Pega o texto do corpo do documento
    documentos[file.getName()] = content;  Adiciona o nome e conte√∫do no dicion√°rio
  }

  return documentos;
}

 Converte um documento (mantendo o original) para PDF na pasta, se o PDF j√° n√£o existir
function criarPdfSeNaoExistir(nomeDocumento, nomePdf) {
   Verifica se o PDF j√° existe na pasta
  const files = folder.getFiles();
  let pdfExiste = false;

  while (files.hasNext()) {
    const file = files.next();
    if (file.getName() === nomePdf && file.getMimeType() === MimeType.PDF) {
      pdfExiste = true;
      break;
    }
  }

  if (pdfExiste) {
     Logger.log(`O arquivo PDF ${nomePdf} j√° existe na pasta.`);
    return;  N√£o faz nada se o PDF j√° existir
  }

   Obt√©m o documento Google Docs pelo nome
  const documentFiles = folder.getFilesByName(nomeDocumento);
  if (!documentFiles.hasNext()) {
    Logger.log(`Erro O documento ${nomeDocumento} n√£o foi encontrado na pasta.`);
    return;  Interrompe se o documento n√£o for encontrado
  }

  const file = documentFiles.next();

   Verifica se o arquivo √© do tipo Google Docs
  if (file.getMimeType() !== MimeType.GOOGLE_DOCS) {
    Logger.log(`Erro O arquivo ${nomeDocumento} n√£o √© um documento Google Docs.`);
    return;  Interrompe se o arquivo n√£o for do tipo esperado
  }

  try {
     Abre o documento e converte para PDF
    const doc = DocumentApp.openById(file.getId());
    const pdfBlob = doc.getAs(MimeType.PDF);
    pdfBlob.setName(nomePdf);  Define o nome do PDF

     Cria o PDF na pasta
    folder.createFile(pdfBlob);
    Logger.log(`PDF ${nomePdf} criado com sucesso na pasta.`);
  } catch (e) {
    Logger.log(`Erro ao criar o PDF ${e.message}`);
  }
}

function gerarCertificadosPersonalizados() {
  const documentos = obterConteudoDocumentosGoogleDocs();  Obt√©m o dicion√°rio de documentos e seus conte√∫dos
  const resultados = {};  Dicion√°rio para armazenar os PDFs gerados para cada pessoa

   Itera sobre a lista de nomes
  nameList.forEach((nome, idx) = {
    resultados[nome] = [];  Inicializa a lista de PDFs para cada nome

    const documentosAssociados = [];  Armazena os documentos encontrados para a pessoa

     Verifica os documentos que cont√™m o nome da pessoa
    for (const [documentoNome, conteudo] of Object.entries(documentos)) {
      if (conteudo.toLowerCase().includes(nome.toLowerCase())) {  Busca case-insensitive
        documentosAssociados.push(documentoNome);  Armazena o nome do documento
      }
    }

    Logger.log(`Processando para o nome ${nome}`);  Log do nome em processamento
    Logger.log(`Documentos encontrados para ${nome} ${documentosAssociados}`);  Log dos documentos encontrados

     Cria os PDFs com nome baseado em substituirTextoPorPosicao e numera√ß√£o condicional
    if (documentosAssociados.length === 1) {
       Se houver apenas um documento, cria o PDF com nome gerado por substituirTextoPorPosicao
      const nomePdf = substituirTextoPorPosicao(docname)[idx];
      Logger.log(`Gerando PDF com o nome ${nomePdf}`);  Log para verificar o nome do PDF
      criarPdfSeNaoExistir(documentosAssociados[0], nomePdf);  Passa o nome correto
      resultados[nome].push(nomePdf);  Adiciona o nome do PDF gerado √† lista de resultados
    } else {
       Se houver mais de um documento, cria os PDFs com numera√ß√£o, mantendo a fun√ß√£o substituirTextoPorPosicao
      documentosAssociados.forEach((documentoNome, documentoIdx) = {
        const nomePdf = `${substituirTextoPorPosicao(docname)[idx]}_${documentoIdx + 1}.pdf`;  Nome com numera√ß√£o
        Logger.log(`Gerando PDF com o nome ${nomePdf}`);  Log para verificar o nome do PDF
        criarPdfSeNaoExistir(documentoNome, nomePdf);  Passa o nome correto
        resultados[nome].push(nomePdf);  Adiciona o nome do PDF gerado √† lista de resultados
      });
    }
  });
  Utilities.sleep(10000);
  return resultados;  Retorna o dicion√°rio com os PDFs gerados para cada nome
}


function enviarEmailsComCertificados() {
  console.time(Execu√ß√£o);  Marca o in√≠cio com um r√≥tulo
  resultados = gerarCertificadosPersonalizados();
   Para cada nome e √≠ndice na lista de nomes
  nameList.forEach((nome, idx) = {
    const email = emailList[idx];  Email correspondente ao nome no √≠ndice

     Obt√©m os arquivos PDF associados ao nome no dicion√°rio de resultados
    const arquivosPdf = resultados[nome];
     Se houver PDFs para o nome, prepara o email com anexos
    if (arquivosPdf && arquivosPdf.length  0) {
      const anexos = arquivosPdf.map(pdfNome = {
        const arquivo = folder.getFilesByName(pdfNome);
        if (arquivo.hasNext()) {
          return arquivo.next().getAs(MimeType.PDF);  Obt√©m o PDF como blob para anexar
        }
      }).filter(anexo = anexo);  Remove anexos inv√°lidosnulos

       Envia o email com os anexos
      sendEmail(email, anexos, idx+2)
    } else { 
      pagina1.getRange(idx+2, 3).setValue('Erro O usu√°rio n√£o possui arquivos em seu nome.');
    }  
  });
    
  for (let i = 0; i  1e6; i++) {
    Math.sqrt(i);
  }

  console.timeEnd(Execu√ß√£o);  Exibe o tempo de execu√ß√£o
}

function sendEmail(email, anexos, idx) {
  if (status[idx -2] && status[idx - 2].startsWith('E-mail enviado para')) {
    pagina1.getRange(idx, 3).setValue('E-mail j√° enviado anteriormente');
    return;
  } else if (status[idx - 2] === 'E-mail j√° enviado anteriormente') {
    return;
  }

  if (!email) {
    console.log(Erro O e-mail do destinat√°rio n√£o foi especificado.);
    pagina1.getRange(idx, 3).setValue('O e-mail do destinat√°rio n√£o foi especificado.');
    return;
  }

if (anexos.lenght === 0){
    pagina1.getRange(idx, 3).setValue('Ocorreu um erro e o e-mail n√£o foi enviado. Por favor, tente novamente.');
  return;
  } else {
  var corpoEmailList = substituirTextoPorPosicao(textemail);
  var corpoEmail = corpoEmailList[idx - 2];
  MailApp.sendEmail({
    to email,
    cc copia,
    replyTo responder,
    subject titemail,
    body corpoEmail,
    attachments anexos
  });

  pagina1.getRange(idx, 3).setValue(E-mail enviado para  + email +  com  + anexos.length +  arquivo(s) em anexo.);
  }
}

function confirmEmail() {
  var response = Browser.msgBox('Confirma√ß√£o', 'Voc√™ realmente deseja enviar os emails', Browser.Buttons.YES_NO);
  if (response == 'no') {
    Browser.msgBox('Envio de Emails Cancelado', 'Os emails n√£o foram enviados.', Browser.Buttons.OK);
    return;
  }
  enviarEmailsComCertificados();
} 
